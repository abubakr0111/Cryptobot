from flask import Flask
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import logging
import os
import json
import csv
import requests
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
import re
from datetime import datetime
from io import BytesIO
import telegram
import asyncio

# üîê –¢–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞
TOKEN = '7313454103:AAGJEMNktJUABdhxky-BT8eTSAJ3TpcLdvA'
ADMIN_ID = 664563521

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TIMEFRAMES = ['1m', '5m', '15m', '1h', '4h', '1d']
user_state = {}
user_list = set()

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [[KeyboardButton("üìà –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"), KeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")]],
    resize_keyboard=True)

# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
def escape_markdown(text):
    return re.sub(r'([_*()~`>#+=|{}.!\-])', r'\\1', text)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_list.add(chat_id)
    user_state[chat_id] = {}
    await update.message.reply_text(escape_markdown(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç üîÆ\n\n"
        "–ù–∞–∂–º–∏ ¬´üìà –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑¬ª, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä—É, –∏–ª–∏ ¬´üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª"),
        reply_markup=main_menu, parse_mode="MarkdownV2")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
async def instruction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(escape_markdown(
        "üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
        "1. –ù–∞–∂–º–∏ ¬´üìà –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑¬ª\n"
        "2. –í–≤–µ–¥–∏ –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT)\n"
        "3. –í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º\n"
        "4. –ü–æ–ª—É—á–∏—à—å –≥—Ä–∞—Ñ–∏–∫ + –ø—Ä–æ–≥–Ω–æ–∑\n\n"
        "üõ†Ô∏è –¢–∞–∫–∂–µ –µ—Å—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å /admin"),
        parse_mode="MarkdownV2")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip().upper()

    if text == "üìà –ù–ê–ß–ê–¢–¨ –ü–†–û–ì–ù–û–ó":
        user_state[chat_id] = {}
        await update.message.reply_text(
            escape_markdown("–í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT)"),
            parse_mode="MarkdownV2")
    elif text == "üìñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø":
        await instruction(update, context)
    elif chat_id in user_state and 'pair' not in user_state[chat_id]:
        user_state[chat_id]['pair'] = text
        await send_timeframe_buttons(update, context)
    else:
        await update.message.reply_text(
            escape_markdown("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é."),
            reply_markup=main_menu, parse_mode="MarkdownV2")

# –ö–Ω–æ–ø–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
async def send_timeframe_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [[InlineKeyboardButton(tf, callback_data=f"tf:{tf}")] for tf in TIMEFRAMES]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=InlineKeyboardMarkup(buttons))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id
    data = query.data

    if data.startswith("tf:"):
        tf = data.split(":")[1]
        pair = user_state[chat_id].get("pair")
        if pair:
            await query.edit_message_text("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ...")
            candles = get_futures_candles(pair, tf)
            if candles is not None:
                add_indicators(candles)
                fig = plot_candlestick(candles)
                buf = BytesIO()
                fig.savefig(buf, format='png')
                buf.seek(0)
                plt.close(fig)

                prediction = escape_markdown(predict_trend(candles))
                support, resistance = get_support_resistance(candles)
                tp = calc_tp(candles)
                sl = calc_sl(candles)

                caption = (f"<b>{pair} ‚Äî {tf}</b>\n"
                           f"üìà –ü—Ä–æ–≥–Ω–æ–∑:\n{prediction}\n"
                           f"üîª –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {support:.2f}\n"
                           f"üî∫ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {resistance:.2f}\n"
                           f"üéØ Take Profit: {tp}\n"
                           f"üõë Stop Loss: {sl}")

                await context.bot.send_photo(chat_id=chat_id,
                                             photo=buf,
                                             filename="chart.png",
                                             caption=caption,
                                             parse_mode="HTML")

                save_forecast({
                    "user": chat_id,
                    "pair": pair,
                    "timeframe": tf,
                    "prediction": prediction,
                    "timestamp": datetime.now().isoformat()
                })
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    elif data == "back":
        user_state[chat_id].pop("pair", None)
        await context.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:")
    elif data == "admin_back":
        await query.edit_message_text("‚Ü©Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π —Å Binance Futures
def get_futures_candles(symbol: str, interval: str, limit: int = 100):
    try:
        url = f"https://fapi.binance.com/fapi/v1/klines?symbol={symbol}&interval={interval}&limit={limit}"
        response = requests.get(url)
        if response.status_code != 200:
            return None
        data = response.json()
        if not data or isinstance(data, dict):
            return None
        ohlc = [{
            'Date': datetime.fromtimestamp(c[0] / 1000),
            'Open': float(c[1]),
            'High': float(c[2]),
            'Low': float(c[3]),
            'Close': float(c[4]),
            'Volume': float(c[5])
        } for c in data]
        return pd.DataFrame(ohlc).set_index('Date')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–≤–µ—á–µ–π: {e}")
        return None

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
def add_indicators(df):
    df['EMA20'] = df['Close'].ewm(span=20).mean()
    df['EMA50'] = df['Close'].ewm(span=50).mean()
    delta = df['Close'].diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(14).mean()
    avg_loss = loss.rolling(14).mean()
    rs = avg_gain / avg_loss
    df['RSI'] = 100 - (100 / (1 + rs))
    df['MACD'] = df['Close'].ewm(12).mean() - df['Close'].ewm(26).mean()

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
def get_support_resistance(df):
    highs = df['High'].rolling(10).max()
    lows = df['Low'].rolling(10).min()
    return lows.iloc[-1], highs.iloc[-1]

# –ì—Ä–∞—Ñ–∏–∫
def plot_candlestick(df):
    support, resistance = get_support_resistance(df)
    apds = [
        mpf.make_addplot(df['EMA20'], color='blue'),
        mpf.make_addplot(df['EMA50'], color='purple'),
        mpf.make_addplot([support] * len(df), color='green', linestyle='--'),
        mpf.make_addplot([resistance] * len(df), color='red', linestyle='--')
    ]
    fig, _ = mpf.plot(df, type='candle', style='charles', addplot=apds, volume=True, returnfig=True)
    return fig

# –ü—Ä–æ–≥–Ω–æ–∑
def predict_trend(df):
    close = df['Close'].iloc[-1]
    ema20 = df['EMA20'].iloc[-1]
    ema50 = df['EMA50'].iloc[-1]
    rsi = df['RSI'].iloc[-1]
    macd = df['MACD'].iloc[-1]
    support, resistance = get_support_resistance(df)

    signals = []
    if close > resistance:
        signals.append("–ü—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è üöÄ")
    elif close < support:
        signals.append("–ü—Ä–æ–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üìâ")
    if ema20 > ema50:
        signals.append("EMA20 –≤—ã—à–µ EMA50 (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)")
    else:
        signals.append("EMA20 –Ω–∏–∂–µ EMA50 (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)")
    if rsi > 70:
        signals.append("–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (RSI > 70)")
    elif rsi < 30:
        signals.append("–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (RSI < 30)")
    if macd > 0:
        signals.append("MACD –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π")
    else:
        signals.append("MACD –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π")
    return '\n'.join(signals)

# TP / SL
def calc_tp(df):
    return round(df['Close'].iloc[-1] * 1.03, 2)

def calc_sl(df):
    return round(df['Close'].iloc[-1] * 0.97, 2)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
def save_forecast(entry):
    data = []
    if os.path.exists("forecast_history.json"):
        with open("forecast_history.json", "r") as f:
            data = json.load(f)
    data.append(entry)
    with open("forecast_history.json", "w") as f:
        json.dump(data, f, indent=2)

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        if update.message:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", parse_mode="HTML")
        elif update.callback_query:
            await update.callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    text = (f"<b>üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(user_list)}</b>\n\n"
            "üì• <b>/set_photo</b> ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ\n"
            "üì¢ <b>/broadcast &lt;—Ç–µ–∫—Å—Ç&gt;</b> ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º\n"
            "üóë <b>/clear_users</b> ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
            "üïì <b>/history</b> ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (—Ñ–∞–π–ª)")

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    try:
        if update.message:
            await update.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        elif update.callback_query:
            await update.callback_query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ admin_panel: {e}")

# –ò—Å—Ç–æ—Ä–∏—è
async def send_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    if not os.path.exists("forecast_history.json"):
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    with open("forecast_history.json", "r") as f:
        data = json.load(f)
    filename = "forecast_history.csv"
    with open(filename, "w", newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=["user", "pair", "timeframe", "prediction", "timestamp"])
        writer.writeheader()
        writer.writerows(data)
    await context.bot.send_document(chat_id=update.effective_chat.id, document=open(filename, "rb"))

# –§–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞
async def set_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.", parse_mode="HTML")

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    photo_file = await update.message.photo[-1].get_file()
    await photo_file.download_to_drive("admin_uploaded_image.jpg")
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", parse_mode="HTML")

# Flask keep-alive
flask_app = Flask('')

@flask_app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def keep_alive():
    Thread(target=lambda: flask_app.run(host='0.0.0.0', port=8080)).start()

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    await telegram.Bot(token=TOKEN).delete_webhook()
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("history", send_history))
    application.add_handler(CommandHandler("set_photo", set_photo))
    application.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))
    keep_alive()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

if __name__ == '__main__':
    try:
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.get_event_loop().run_until_complete(main())
    except RuntimeError:
        print("Event loop is already running.")
